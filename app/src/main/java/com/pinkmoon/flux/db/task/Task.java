package com.pinkmoon.flux.db.task;

import static androidx.room.ForeignKey.CASCADE;

import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.PrimaryKey;

import com.pinkmoon.flux.db.category.Category;

/**
 * A Task POJO (plain old Java object). This class models in a generic
 * way a Task that is much like a "to-do" on a physical planner.
 */
@Entity(tableName = "table_task",
        foreignKeys = @ForeignKey(entity = Category.class,
                                    parentColumns = "categoryId",
                                    childColumns = "taskCategoryIdFk",
                                    onDelete = CASCADE))
public class Task {

    @PrimaryKey(autoGenerate = true)
    private int taskId;

    // Test commit
    private int taskCategoryIdFk;

    private String taskName;

    private String taskDescription;

    private String dueDate;

    private boolean completeStatus;

    /**
     * Constructor for the Task object that represents a table on our database.
     * Note that the taskId is not present in this constructor because it is
     * a column that is auto-generated by room, so we need not
     * concern ourselves with it.
     * @param taskCategoryIdFk the numerical value that relates a Category to this Task.
     * @param taskName the name of the task as a String.
     * @param taskDescription a description of the task as a String.
     * @param dueDate the hard due date for this task. It would be in the
     *                format of "yyy-MM-dd HH:mm:ss" to allow us to sort by date
     *                easily with a query through SQLite without doing it
     *                ourselves as logic within our codebase.
     * @param completeStatus a boolean value that denotes a Task as completed
     *                       or not. This is useful because if we check today's date
     *                       against the @dueDate, and this value is still set to
     *                       false it means either: the user forgot to mark it as
     *                       done, or genuinely forgot to complete it and it is
     *                       past its due date (late).
     *
     */
    public Task(int taskCategoryIdFk, String taskName, String taskDescription,
                String dueDate, boolean completeStatus) {
        this.taskCategoryIdFk = taskCategoryIdFk;
        this.taskName = taskName;
        this.taskDescription = taskDescription;
        this.dueDate = dueDate;
        this.completeStatus = completeStatus;
    }

    public int getTaskId() {
        return taskId;
    }

    public void setTaskId(int taskId) {
        this.taskId = taskId;
    }

    public int getTaskCategoryIdFk() {
        return taskCategoryIdFk;
    }

    public void setTaskCategoryIdFk(int taskCategoryIdFk) {
        this.taskCategoryIdFk = taskCategoryIdFk;
    }

    public String getTaskName() {
        return taskName;
    }

    public void setTaskName(String taskName) {
        this.taskName = taskName;
    }

    public String getTaskDescription() {
        return taskDescription;
    }

    public void setTaskDescription(String taskDescription) {
        this.taskDescription = taskDescription;
    }

    public String getDueDate() {
        return dueDate;
    }

    public void setDueDate(String dueDate) {
        this.dueDate = dueDate;
    }

    public boolean isCompleteStatus() {
        return completeStatus;
    }

    public void setCompleteStatus(boolean completeStatus) {
        this.completeStatus = completeStatus;
    }

    /*
     * Please note that any business logic (logic that does not directly work
     * with the UI, and that relates to this fragment should be added to this class.
     * For example, if you need to split a date string into an array, said logic
     * should be written here.
     */
}
